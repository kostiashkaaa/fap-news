#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—à–µ–≥–æ Telegram ID
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –±–æ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ–Ω –ø–æ–∫–∞–∂–µ—Ç –≤–∞—à ID
"""

import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
import asyncio

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ config.json
with open('config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

TOKEN = config.get('telegram', {}).get('token')
if not TOKEN:
    print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json")
    exit(1)

bot = Bot(token=TOKEN)
dp = Dispatcher()

@dp.message()
async def get_user_id(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    username = message.from_user.username or "–Ω–µ—Ç username"
    first_name = message.from_user.first_name or ""
    last_name = message.from_user.last_name or ""
    
    response = (
        f"üÜî <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"<b>ID:</b> <code>{user_id}</code>\n"
        f"<b>Username:</b> @{username}\n"
        f"<b>–ò–º—è:</b> {first_name} {last_name}\n\n"
        f"üí° –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à ID <code>{user_id}</code> –≤ config.json –≤ —Å–µ–∫—Ü–∏—é:\n"
        f'<code>"admin": {{"allowed_user_ids": [{user_id}]}}</code>\n\n'
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É –≤–∞—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!"
    )
    
    await message.answer(response, parse_mode="HTML")

async def main():
    print("ü§ñ –ë–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–∞–ø—É—â–µ–Ω!")
    print("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π ID")
    print("‚èπÔ∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        await dp.start_polling(bot)
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())

