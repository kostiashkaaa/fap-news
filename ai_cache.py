#!/usr/bin/env python3
"""
AI Response Cache - –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò-–æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –≤—ã–∑–æ–≤–æ–≤
"""

import hashlib
import json
import logging
import sqlite3
from datetime import datetime, timedelta
from pathlib import Path
from typing import Optional, Dict, Any
from contextlib import contextmanager

logger = logging.getLogger(__name__)

class AICache:
    """–ö—ç—à –¥–ª—è –ò–ò-–æ—Ç–≤–µ—Ç–æ–≤ —Å SQLite —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""
    
    def __init__(self, cache_db_path: Optional[Path] = None):
        self.cache_db_path = cache_db_path or Path(__file__).parent / "ai_cache.sqlite3"
        self._init_cache_db()
    
    def _init_cache_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫—ç—à–∞"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS ai_cache (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    content_hash TEXT UNIQUE NOT NULL,
                    response_type TEXT NOT NULL,  -- 'summary', 'urgency', 'freshness'
                    response_content TEXT NOT NULL,
                    created_at TEXT NOT NULL,
                    expires_at TEXT NOT NULL,
                    source_info TEXT,  -- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    UNIQUE(content_hash, response_type)
                )
            """)
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_content_hash_type 
                ON ai_cache(content_hash, response_type)
            """)
            
            cursor.execute("""
                CREATE INDEX IF NOT EXISTS idx_expires_at 
                ON ai_cache(expires_at)
            """)
            
            conn.commit()
    
    @contextmanager
    def _get_connection(self):
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        conn = sqlite3.connect(self.cache_db_path)
        try:
            yield conn
        finally:
            conn.close()
    
    def _generate_content_hash(self, title: str, content: str, prompt_type: str = "") -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö—ç—à –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        normalized_text = f"{title.strip().lower()} {content.strip().lower()} {prompt_type}"
        return hashlib.sha256(normalized_text.encode('utf-8')).hexdigest()[:16]
    
    def get_cached_response(self, title: str, content: str, response_type: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ò–ò
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
            response_type: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞ ('summary', 'urgency', 'freshness')
            
        Returns:
            –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None
        """
        content_hash = self._generate_content_hash(title, content, response_type)
        
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT response_content, expires_at 
                FROM ai_cache 
                WHERE content_hash = ? AND response_type = ? AND expires_at > ?
            """, (content_hash, response_type, datetime.utcnow().isoformat()))
            
            result = cursor.fetchone()
            if result:
                response_content, expires_at = result
                logger.info(f"üéØ Cache HIT for {response_type}: {title[:30]}...")
                return response_content
            
            logger.debug(f"Cache MISS for {response_type}: {title[:30]}...")
            return None
    
    def cache_response(self, title: str, content: str, response_type: str, 
                      response_content: str, ttl_hours: int = 24, 
                      source_info: str = "") -> None:
        """
        –ö—ç—à–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ò–ò
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
            response_type: –¢–∏–ø –æ—Ç–≤–µ—Ç–∞
            response_content: –û—Ç–≤–µ—Ç –ò–ò
            ttl_hours: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —á–∞—Å–∞—Ö
            source_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
        """
        content_hash = self._generate_content_hash(title, content, response_type)
        now = datetime.utcnow()
        expires_at = now + timedelta(hours=ttl_hours)
        
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT OR REPLACE INTO ai_cache 
                (content_hash, response_type, response_content, created_at, expires_at, source_info)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (content_hash, response_type, response_content, 
                  now.isoformat(), expires_at.isoformat(), source_info))
            conn.commit()
            
            logger.info(f"üíæ Cached {response_type} response for: {title[:30]}...")
    
    def cleanup_expired(self) -> int:
        """–£–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                DELETE FROM ai_cache WHERE expires_at <= ?
            """, (datetime.utcnow().isoformat(),))
            
            deleted_count = cursor.rowcount
            conn.commit()
            
            if deleted_count > 0:
                logger.info(f"üßπ Cleaned up {deleted_count} expired cache entries")
            
            return deleted_count
    
    def get_cache_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
            cursor.execute("SELECT COUNT(*) FROM ai_cache")
            total_entries = cursor.fetchone()[0]
            
            # –ó–∞–ø–∏—Å–∏ –ø–æ —Ç–∏–ø–∞–º
            cursor.execute("""
                SELECT response_type, COUNT(*) 
                FROM ai_cache 
                GROUP BY response_type
            """)
            by_type = dict(cursor.fetchall())
            
            # –£—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
            cursor.execute("""
                SELECT COUNT(*) FROM ai_cache WHERE expires_at <= ?
            """, (datetime.utcnow().isoformat(),))
            expired_entries = cursor.fetchone()[0]
            
            return {
                "total_entries": total_entries,
                "by_type": by_type,
                "expired_entries": expired_entries,
                "active_entries": total_entries - expired_entries
            }
    
    def clear_cache(self, response_type: Optional[str] = None) -> int:
        """–û—á–∏—â–∞–µ—Ç –∫—ç—à (–ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–ª–∏ –ø–æ —Ç–∏–ø—É)"""
        with self._get_connection() as conn:
            cursor = conn.cursor()
            
            if response_type:
                cursor.execute("DELETE FROM ai_cache WHERE response_type = ?", (response_type,))
            else:
                cursor.execute("DELETE FROM ai_cache")
            
            deleted_count = cursor.rowcount
            conn.commit()
            
            logger.info(f"üóëÔ∏è Cleared {deleted_count} cache entries" + 
                       (f" of type '{response_type}'" if response_type else ""))
            
            return deleted_count


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞
_ai_cache = None

def get_ai_cache() -> AICache:
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫—ç—à–∞"""
    global _ai_cache
    if _ai_cache is None:
        _ai_cache = AICache()
    return _ai_cache


if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞
    import logging
    logging.basicConfig(level=logging.INFO)
    
    cache = AICache()
    
    # –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    title = "Test News Title"
    content = "Test news content for caching"
    
    # –ö—ç—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    cache.cache_response(title, content, "summary", "Test summary response", ttl_hours=1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
    cached = cache.get_cached_response(title, content, "summary")
    print(f"Cached response: {cached}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats = cache.get_cache_stats()
    print(f"Cache stats: {stats}")
