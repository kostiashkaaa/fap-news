import asyncio
import logging
import os
import re
from typing import Optional
from groq import Groq

from ai_cache import get_ai_cache
from news_importance_analyzer import NewsImportanceAnalyzer

logger = logging.getLogger(__name__)

def truncate_by_sentences(text: str, max_length: int) -> str:
    """Truncate text by complete sentences, not by characters"""
    if len(text) <= max_length:
        return text
    
    # Find all sentence endings
    sentences = re.split(r'[.!?]+', text)
    result = ""
    
    for sentence in sentences:
        sentence = sentence.strip()
        if not sentence:
            continue
            
        # Add sentence ending back
        if sentence and not sentence.endswith(('.', '!', '?')):
            sentence += '.'
        
        # Check if adding this sentence would exceed max_length
        if len(result + sentence + ' ') > max_length:
            break
            
        result += sentence + ' '
    
    return result.strip()

class AISummarizer:
    """AI-powered news summarizer using Groq API"""
    
    def __init__(self, config: dict):
        self.config = config
        self.enabled = config.get("enabled", False)
        self.provider = config.get("provider", "groq")
        self.model_name = config.get("model", "llama-3.1-8b-instant")
        self.max_length = config.get("max_summary_length", 200)
        self.temperature = config.get("temperature", 0.2)
        self.max_tokens = config.get("max_tokens", 256)
        
        # Rate limiting settings
        rate_limit_cfg = config.get("rate_limit", {})
        self.delay_between_calls = rate_limit_cfg.get("delay_between_calls", 0.5)
        
        # Cache settings
        self.cache_enabled = config.get("cache_enabled", True)
        self.cache_ttl_hours = config.get("cache_ttl_hours", 24)
        self.cache = get_ai_cache() if self.cache_enabled else None
        
        # Importance analyzer
        self.importance_analyzer = NewsImportanceAnalyzer()
        
        # Initialize Groq client
        api_key = config.get("api_key") or os.getenv("GROQ_API_KEY")
        
        if not api_key and self.enabled:
            logger.warning("Groq API key not found. AI summarization will be disabled.")
            self.enabled = False
        
        if self.enabled and api_key:
            self.client = Groq(api_key=api_key)
        else:
            self.client = None
    
    async def _call_groq_api(self, prompt: str) -> Optional[str]:
        """Call Groq API with rate limiting"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
            await asyncio.sleep(self.delay_between_calls)
            
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π. –ü–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Å–≤–æ–¥–∫–∏. –°–æ—Ö—Ä–∞–Ω—è–π –≤—Å–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=self.max_tokens,
                temperature=self.temperature,
            )
            
            if response.choices and response.choices[0].message.content:
                summary = response.choices[0].message.content.strip()
                # Truncate by complete sentences, not by characters
                summary = truncate_by_sentences(summary, self.max_length)
                logger.info(f"Groq summary created: {len(summary)} chars")
                return summary
            else:
                logger.warning("Groq returned empty response")
                return None
                
        except Exception as e:
            if "429" in str(e) or "rate_limit" in str(e).lower():
                logger.warning(f"Groq rate limit hit, waiting 5 seconds: {e}")
                await asyncio.sleep(5)
                return None
            else:
                logger.error(f"Groq API error: {e}")
                return None

    async def summarize(self, title: str, content: str, link: str) -> Optional[str]:
        """
        Create AI-powered summary of news content using Groq API with caching
        
        Args:
            title: News title
            content: News content/description
            link: Link to original article
            
        Returns:
            Summarized content or None if failed
        """
        if not self.enabled or not self.client:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache:
            cached_summary = self.cache.get_cached_response(title, content, "summary")
            if cached_summary:
                return cached_summary
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–∂–Ω–æ—Å—Ç—å –Ω–æ–≤–æ—Å—Ç–∏
        importance = self.importance_analyzer.analyze_importance(title, content)
        adaptive_length = self.importance_analyzer.get_adaptive_length(importance, self.max_length)
        include_details = self.importance_analyzer.should_include_details(importance)
        
        logger.info(f"üìä News importance: {importance.category} (score: {importance.score:.2f}), length: {adaptive_length}")
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ç–µ–π –≤ —Å—Ç–∏–ª–µ Varlamov News
        if importance.category == "critical":
            length_instruction = f"–°–æ–∑–¥–∞–π –ü–û–õ–ù–£–Æ –°–¢–ê–¢–¨–Æ –¥–æ {adaptive_length} —Å–∏–º–≤–æ–ª–æ–≤ —Å –í–°–ï–ú–ò –¥–µ—Ç–∞–ª—è–º–∏"
            detail_instruction = "–í–∫–ª—é—á–∏ –í–°–ï –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏: –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—ã—Ç–∏–π, –ø—Ä–∏—á–∏–Ω—ã, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è, –∏—Å—Ç–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞, –º–Ω–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤"
        elif importance.category == "high":
            length_instruction = f"–°–æ–∑–¥–∞–π –†–ê–ó–í–ï–†–ù–£–¢–£–Æ –°–¢–ê–¢–¨–Æ –¥–æ {adaptive_length} —Å–∏–º–≤–æ–ª–æ–≤"
            detail_instruction = "–í–∫–ª—é—á–∏ –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏: –∏–º–µ–Ω–∞, –º–µ—Å—Ç–∞, –¥–∞—Ç—ã, —Ü–∏—Ñ—Ä—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç, –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è"
        else:
            length_instruction = f"–°–æ–∑–¥–∞–π –ò–ù–§–û–†–ú–ê–¢–ò–í–ù–£–Æ –°–¢–ê–¢–¨–Æ –¥–æ {adaptive_length} —Å–∏–º–≤–æ–ª–æ–≤"
            detail_instruction = "–í–∫–ª—é—á–∏ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç"
        
        prompt = f"""–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∂—É—Ä–Ω–∞–ª–∏—Å—Ç –≤ —Å—Ç–∏–ª–µ Varlamov News. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ—Å—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ —Å–æ–∑–¥–∞—Ç—å –ü–û–õ–ù–£–Æ –°–¢–ê–¢–¨–Æ.

–ü–†–ê–í–ò–õ–ê:
1. –í–°–ï–ì–î–ê –ø–µ—Ä–µ–≤–æ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –Ω–∏–∫–∞–∫–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
2. {length_instruction}
3. {detail_instruction}
4. –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º, –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –∫–∞–∫ –≤ Varlamov News
5. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏ - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–π —Å —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏
6. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ** –∏–ª–∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã
7. –ù–ï –Ω–∞—á–∏–Ω–∞–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã (–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è:, –°–®–ê:, –∏ —Ç.–¥.)
8. –°–æ–∑–¥–∞–π –ü–û–õ–ù–£–Æ –°–¢–ê–¢–¨–Æ - –ª—é–¥–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å—é –Ω–æ–≤–æ—Å—Ç—å –≤ Telegram
9. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–Ω–æ: —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø–æ—á–µ–º—É, –∫–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è
10. –í–∫–ª—é—á–∏ –í–°–ï –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
11. –î–æ–±–∞–≤—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
12. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã - —Ä–∞–∑–¥–µ–ª—è–π —Ç–µ–∫—Å—Ç –Ω–∞ 2-3 –∞–±–∑–∞—Ü–∞
13. –ú–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
14. –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü - –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥–µ—Ç–∞–ª–∏

–í–ê–ñ–ù–û–°–¢–¨ –ù–û–í–û–°–¢–ò: {importance.category.upper()} (—Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(importance.factors)})

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {content}
–°—Å—ã–ª–∫–∞: {link}

–°–æ–∑–¥–∞–π –ü–û–õ–ù–£–Æ –°–¢–ê–¢–¨–Æ –≤ —Å—Ç–∏–ª–µ Varlamov News –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞–±–∑–∞—Ü–∞–º–∏:"""
        
        summary = await self._call_groq_api(prompt)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Å–≤–æ–¥–∫–∏
        if not summary or len(summary.strip()) < 10:
            logger.warning(f"Poor quality summary (length: {len(summary) if summary else 0}), retrying...")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            retry_prompt = f"""–°–†–û–ß–ù–û! –°–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –°–¢–ê–¢–¨–Æ –≤ —Å—Ç–∏–ª–µ Varlamov News –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∏–Ω–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤
- –¢–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ü–æ–ª–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –í—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
- –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ - —Å—Ä–∞–∑—É —Å —Å—É—Ç–∏
- –ù–ï –Ω–∞—á–∏–Ω–∞–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 2-3 –∞–±–∑–∞—Ü–∞
- –ú–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
- –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü - –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ
- –û—Å—Ç–∞–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã - –¥–µ—Ç–∞–ª–∏ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {content}

–°—Ç–∞—Ç—å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —Å –∞–±–∑–∞—Ü–∞–º–∏:"""
            
            summary = await self._call_groq_api(retry_prompt)
            
            if not summary or len(summary.strip()) < 10:
                logger.error(f"Failed to create quality summary for: {title[:50]}...")
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∫–∞–∫ fallback –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
                simple_title = title.replace("UK", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è").replace("watchdog", "–Ω–∞–¥–∑–æ—Ä–Ω—ã–π –æ—Ä–≥–∞–Ω").replace("cuts", "—Å–Ω–∏–∂–∞–µ—Ç").replace("productivity", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å").replace("forecast", "–ø—Ä–æ–≥–Ω–æ–∑").replace("worsening", "—É—Å—É–≥—É–±–ª—è—è").replace("budget", "–±—é–¥–∂–µ—Ç–Ω—ã–π").replace("deficit", "–¥–µ—Ñ–∏—Ü–∏—Ç")
                summary = simple_title
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –≤ —Å–≤–æ–¥–∫–µ
        if summary and self._contains_english(summary):
            logger.warning(f"Summary contains English text, retrying translation...")
            
            # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
            translation_prompt = f"""–ü–ï–†–ï–í–ï–î–ò –≠–¢–£ –ù–û–í–û–°–¢–¨ –ù–ê –†–£–°–°–ö–ò–ô –Ø–ó–´–ö! –ù–∏–∫–∞–∫–æ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞!

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {content}

–ü–µ—Ä–µ–≤–µ–¥–∏ –∏ —Å–æ–∑–¥–∞–π –ü–û–õ–ù–£–Æ –°–¢–ê–¢–¨–Æ –≤ —Å—Ç–∏–ª–µ Varlamov News –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:
- –ù–ï –Ω–∞—á–∏–Ω–∞–π —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
- –°—Ä–∞–∑—É —Å —Å—É—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏
- –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ 2-3 –∞–±–∑–∞—Ü–∞
- –ú–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏ –¥–µ–ª–∞–π –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
- –ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü - –∫—Ä–∞—Ç–∫–æ–µ –∏–∑–ª–æ–∂–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –¥–µ—Ç–∞–ª–∏"""
            
            summary = await self._call_groq_api(translation_prompt)
            
            if summary and self._contains_english(summary):
                logger.error(f"Failed to translate summary properly, using fallback")
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –±–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
                simple_title = title.replace("UK", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è").replace("watchdog", "–Ω–∞–¥–∑–æ—Ä–Ω—ã–π –æ—Ä–≥–∞–Ω").replace("cuts", "—Å–Ω–∏–∂–∞–µ—Ç").replace("productivity", "–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å").replace("forecast", "–ø—Ä–æ–≥–Ω–æ–∑").replace("worsening", "—É—Å—É–≥—É–±–ª—è—è").replace("budget", "–±—é–¥–∂–µ—Ç–Ω—ã–π").replace("deficit", "–¥–µ—Ñ–∏—Ü–∏—Ç")
                summary = simple_title
        
        # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–µ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if summary:
            summary = self._clean_formatting(summary)
        
        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if summary and self.cache:
            self.cache.cache_response(
                title, content, "summary", summary, 
                ttl_hours=self.cache_ttl_hours,
                source_info=f"link:{link}"
            )
        
        return summary

    async def check_urgency(self, title: str, content: str) -> bool:
        """
        Check if news is urgent and should be posted immediately with caching
        
        Args:
            title: News title
            content: News content/description
            
        Returns:
            True if news is urgent, False otherwise
        """
        if not self.enabled or not self.client:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache:
            cached_result = self.cache.get_cached_response(title, content, "urgency")
            if cached_result:
                return cached_result.lower() == "true"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
        urgency_keywords = [
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
            "–≤–∑—Ä—ã–≤", "–≤–∑—Ä—ã–≤—ã", "–≤–∑–æ—Ä–≤–∞–ª—Å—è", "–≤–∑–æ—Ä–≤–∞–ª–∏—Å—å", "explosion", "explosions", "bomb", "bombs",
            "—Å—Ç—Ä–µ–ª—å–±–∞", "—Å—Ç—Ä–µ–ª—è—é—Ç", "shooting", "gunfire", "attack", "attacks", "terrorist", "terrorism",
            "—É–±–∏–π—Å—Ç–≤–æ", "—É–±–∏—Ç", "—É–±–∏—Ç—ã", "murder", "killed", "death", "deaths", "casualties",
            "–∞–≤–∞—Ä–∏—è", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "–∫—Ä—É—à–µ–Ω–∏–µ", "crash", "accident", "disaster", "emergency",
            
            # –í–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            "–≤–æ–π–Ω–∞", "war", "–≤–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "military action", "–±–æ–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", "combat",
            "–Ω–∞–ø–∞–¥–µ–Ω–∏–µ", "attack", "–∞—Ç–∞–∫–∞", "strike", "—É–¥–∞—Ä", "bombing", "–±–æ–º–±–∞—Ä–¥–∏—Ä–æ–≤–∫–∞",
            "–≤—Ç–æ—Ä–∂–µ–Ω–∏–µ", "invasion", "–æ–∫–∫—É–ø–∞—Ü–∏—è", "occupation", "–±–ª–æ–∫–∞–¥–∞", "blockade",
            
            # –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã
            "–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç", "coup", "—Ä–µ–≤–æ–ª—é—Ü–∏—è", "revolution", "–º—è—Ç–µ–∂", "rebellion", "–≤–æ—Å—Å—Ç–∞–Ω–∏–µ", "uprising",
            "–æ—Ç—Å—Ç–∞–≤–∫–∞", "resignation", "–∏–º–ø–∏—á–º–µ–Ω—Ç", "impeachment", "–∞—Ä–µ—Å—Ç", "arrest", "–∑–∞–¥–µ—Ä–∂–∞–Ω–∏–µ",
            "—Å–∞–Ω–∫—Ü–∏–∏", "sanctions", "—ç–º–±–∞—Ä–≥–æ", "embargo", "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞", "blockade",
            
            # –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
            "–∑–µ–º–ª–µ—Ç—Ä—è—Å–µ–Ω–∏–µ", "earthquake", "—Ü—É–Ω–∞–º–∏", "tsunami", "–Ω–∞–≤–æ–¥–Ω–µ–Ω–∏–µ", "flood", "–ø–æ–∂–∞—Ä", "fire",
            "—É—Ä–∞–≥–∞–Ω", "hurricane", "—Ç–æ—Ä–Ω–∞–¥–æ", "tornado", "–∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ", "eruption",
            
            # –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã
            "–∫–∏–±–µ—Ä–∞—Ç–∞–∫–∞", "cyberattack", "—Ö–∞–∫–µ—Ä—ã", "hackers", "—É—Ç–µ—á–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "data breach",
            "–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ", "outage", "—Å–±–æ–π", "failure", "–∫—Ä–∏–∑–∏—Å", "crisis",
            
            # –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã
            "–∫—Ä–∞—Ö", "crash", "–æ–±–≤–∞–ª", "collapse", "–¥–µ—Ñ–æ–ª—Ç", "default", "–±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–æ", "bankruptcy",
            "—Ä–µ—Ü–µ—Å—Å–∏—è", "recession", "–¥–µ–ø—Ä–µ—Å—Å–∏—è", "depression", "–∏–Ω—Ñ–ª—è—Ü–∏—è", "inflation",
            
            # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã
            "–¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫—Ä–∏–∑–∏—Å", "diplomatic crisis", "–∫–æ–Ω—Ñ–ª–∏–∫—Ç", "conflict", "—ç—Å–∫–∞–ª–∞—Ü–∏—è", "escalation",
            "—É–≥—Ä–æ–∑–∞", "threat", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "warning", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "danger"
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        full_text = f"{title} {content}".lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        for keyword in urgency_keywords:
            if keyword.lower() in full_text:
                logger.info(f"Urgent news detected: keyword '{keyword}' found in '{title[:50]}...'")
                # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if self.cache:
                    self.cache.cache_response(title, content, "urgency", "true", ttl_hours=self.cache_ttl_hours)
                return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ò–ò –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        try:
            urgency_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –°–†–û–ß–ù–û–ô –∏ —Ç—Ä–µ–±—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏:
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è (–≤–∑—Ä—ã–≤—ã, –∞—Ç–∞–∫–∏, –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã)
- –í–æ–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã –∏ –ø–µ—Ä–µ–≤–æ—Ä–æ—Ç—ã
- –ü—Ä–∏—Ä–æ–¥–Ω—ã–µ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ã
- –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã
- –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –∫—Ä–∏–∑–∏—Å—ã
- –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–Ω—Ü–∏–¥–µ–Ω—Ç—ã

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {content}

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "–î–ê" –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Å—Ä–æ—á–Ω–∞—è, –∏–ª–∏ "–ù–ï–¢" –µ—Å–ª–∏ –æ–±—ã—á–Ω–∞—è:"""
            
            response = await self._call_groq_api(urgency_prompt)
            is_urgent = response and "–î–ê" in response.upper()
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.cache:
                self.cache.cache_response(
                    title, content, "urgency", 
                    "true" if is_urgent else "false", 
                    ttl_hours=self.cache_ttl_hours
                )
            
            if is_urgent:
                logger.info(f"AI detected urgent news: '{title[:50]}...'")
                return True
                
        except Exception as e:
            logger.warning(f"AI urgency check failed: {e}")
        
        return False

    async def check_news_freshness(self, title: str, content: str, max_age_minutes: int = 120) -> bool:
        """
        Check if news is fresh enough to be published with caching
        
        Args:
            title: News title
            content: News content/description
            max_age_minutes: Maximum age in minutes (default 120 = 2 hours)
            
        Returns:
            True if news is fresh enough, False otherwise
        """
        if not self.enabled or not self.client:
            return True  # If AI is not available, assume news is fresh
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if self.cache:
            cached_result = self.cache.get_cached_response(title, content, "freshness")
            if cached_result:
                return cached_result.lower() == "true"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
        time_keywords = [
            # –í—Ä–µ–º—è
            "—á–∞—Å", "—á–∞—Å–∞", "—á–∞—Å–æ–≤", "hour", "hours", "–º–∏–Ω—É—Ç", "–º–∏–Ω—É—Ç—ã", "minute", "minutes",
            "—Å–µ–≥–æ–¥–Ω—è", "today", "–≤—á–µ—Ä–∞", "yesterday", "–∑–∞–≤—Ç—Ä–∞", "tomorrow",
            "—É—Ç—Ä–æ–º", "morning", "–¥–Ω–µ–º", "afternoon", "–≤–µ—á–µ—Ä–æ–º", "evening", "–Ω–æ—á—å—é", "night",
            "—Å–µ–π—á–∞—Å", "now", "—Ç–æ–ª—å–∫–æ —á—Ç–æ", "just now", "–Ω–µ–¥–∞–≤–Ω–æ", "recently",
            
            # –î–∞—Ç—ã
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è",
            "january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december",
            "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
            "monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday",
            
            # –ß–∏—Å–ª–∞ (–¥–ª—è –≤—Ä–µ–º–µ–Ω–∏)
            "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24",
            "30", "45", "60", "90", "120", "180", "240", "300", "360", "480", "720", "1440"
        ]
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        full_text = f"{title} {content}".lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π
        has_time_reference = any(keyword in full_text for keyword in time_keywords)
        
        if not has_time_reference:
            # –ï—Å–ª–∏ –Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–≤–µ–∂–µ–π
            if self.cache:
                self.cache.cache_response(title, content, "freshness", "true", ttl_hours=self.cache_ttl_hours)
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–≤–µ–∂–µ—Å—Ç–∏
        try:
            freshness_prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –Ω–æ–≤–æ—Å—Ç—å –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–∞ –°–í–ï–ñ–ï–ô (–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –Ω–µ –±–æ–ª–µ–µ {max_age_minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥).

–ö—Ä–∏—Ç–µ—Ä–∏–∏ —Å–≤–µ–∂–µ—Å—Ç–∏:
- –ù–æ–≤–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏ –Ω–µ–¥–∞–≤–Ω–µ–π
- –ï—Å–ª–∏ –µ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –≤—Ä–µ–º—è (—á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, "—Å–µ–≥–æ–¥–Ω—è", "—Å–µ–π—á–∞—Å", "—Ç–æ–ª—å–∫–æ —á—Ç–æ") - —É—á–∏—Ç—ã–≤–∞–π –∏—Ö
- –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å —Å—Ç–∞—Ä–∞—è (–≤—á–µ—Ä–∞, –Ω–∞ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ, –º–µ—Å—è—Ü –Ω–∞–∑–∞–¥) - –æ–Ω–∞ –ù–ï —Å–≤–µ–∂–∞—è
- –ï—Å–ª–∏ –Ω–µ—Ç —á–µ—Ç–∫–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π, –Ω–æ –Ω–æ–≤–æ—Å—Ç—å –≤—ã–≥–ª—è–¥–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–π - —Å—á–∏—Ç–∞–π —Å–≤–µ–∂–µ–π

–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
–û–ø–∏—Å–∞–Ω–∏–µ: {content}

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: "–î–ê" –∏–ª–∏ "–ù–ï–¢". –ù–∏–∫–∞–∫–∏—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π."""
            
            response = await self._call_groq_api(freshness_prompt)
            is_fresh = True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–µ–π
            
            if response:
                response_upper = response.upper().strip()
                if "–ù–ï–¢" in response_upper or "NO" in response_upper:
                    logger.info(f"Old news detected: '{title[:50]}...' - AI says it's not fresh")
                    is_fresh = False
                elif "–î–ê" in response_upper or "YES" in response_upper:
                    logger.info(f"Fresh news confirmed: '{title[:50]}...' - AI says it's fresh")
                    is_fresh = True
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ—è—Å–Ω—ã–π, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–≤–µ–∂–µ–π
                    logger.info(f"Unclear freshness response for '{title[:50]}...': '{response}' - assuming fresh")
                    is_fresh = True
            
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if self.cache:
                self.cache.cache_response(
                    title, content, "freshness", 
                    "true" if is_fresh else "false", 
                    ttl_hours=self.cache_ttl_hours
                )
            
            return is_fresh
                
        except Exception as e:
            logger.warning(f"AI freshness check failed: {e}")
        
        # –ï—Å–ª–∏ –ò–ò –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å —Å–≤–µ–∂–µ–π
        return True
    
    def _contains_english(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞"""
        if not text:
            return False
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞
        english_words = [
            'the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by',
            'is', 'are', 'was', 'were', 'be', 'been', 'have', 'has', 'had', 'do', 'does', 'did',
            'will', 'would', 'could', 'should', 'may', 'might', 'can', 'this', 'that', 'these', 'those',
            'a', 'an', 'news', 'breaking', 'urgent', 'update', 'report', 'says', 'said', 'told',
            'according', 'source', 'sources', 'official', 'government', 'president', 'minister',
            'military', 'police', 'security', 'attack', 'war', 'conflict', 'crisis', 'emergency',
            'amazon', 'prime', 'deal', 'days', 'big', 'deals', 'members', 'access', 'midnight',
            'october', 'company', 'expects', 'biggest', 'shopping', 'event', 'year', 'discounts',
            'select', 'items', 'electronics', 'home', 'goods', 'fashion', 'categories',
            'obr', 'uk', 'watchdog', 'productivity', 'forecast', 'budget', 'deficit', 'responsibility',
            'office', 'downgraded', 'growth', 'economy', 'expects', 'revision', 'implications',
            'public', 'finances', 'expansion', 'revenues', 'warned', 'anticipated', 'pressure',
            'government', 'spending', 'plans', 'downgrade', 'reflects', 'ongoing', 'challenges',
            'brexit', 'disruptions', 'skills', 'shortages', 'weak', 'business', 'investment',
            'fbi', 'investigating', 'discord', 'chats', 'suspected', 'assassin', 'charlie', 'kirk',
            'significantly', 'connection', 'probe', 'expanded', 'estimates', 'agents', 'examining',
            'communications', 'servers', 'investigation', 'authorities', 'discovered', 'threats',
            'private', 'rooms', 'enforcement', 'officials', 'monitoring', 'discussions', 'identified',
            'numerous', 'individuals', 'involved', 'planning', 'discussing', 'potential', 'violence',
            'stone', 'skimming', 'contest', 'scotland', 'infiltrated', 'cheaters', 'championships',
            'tournament', 'picturesque', 'town', 'pitlochry', 'attracts', 'competitors', 'attempt',
            'skip', 'stones', 'water', 'maximum', 'distance', 'marred', 'allegations', 'violations',
            'winner', 'admitted', 'noticing', 'suspiciously', 'perfect', 'champion', 'stated',
            'considering', 'stricter', 'regulations', 'future', 'competitions'
        ]
        
        text_lower = text.lower()
        english_count = sum(1 for word in english_words if word in text_lower)
        
        # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 1 –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ - —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç
        return english_count > 1
    
    def _clean_formatting(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å"""
        if not text:
            return text
        
        # –£–¥–∞–ª—è–µ–º ** —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
        
        # –£–¥–∞–ª—è–µ–º –¥—Ä—É–≥–∏–µ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = re.sub(r'\*(.*?)\*', r'\1', text)  # *–∫—É—Ä—Å–∏–≤*
        text = re.sub(r'_(.*?)_', r'\1', text)   # _–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ_
        text = re.sub(r'`(.*?)`', r'\1', text)   # `–∫–æ–¥`
        
        # –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^(–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è|–°–®–ê|–®–æ—Ç–ª–∞–Ω–¥–∏—è|–ù–æ–≤–æ—Å—Ç—å –∏–∑ \w+):\s*', '', text, flags=re.IGNORECASE)
        
        # –£–ª—É—á—à–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–±–∑–∞—Ü–µ–≤
        # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –¥–≤–æ–π–Ω—ã–µ
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∞–±–∑–∞—Ü–µ–≤
        text = re.sub(r'[ \t]+', ' ', text)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –≤ –æ–¥–∏–Ω
        text = re.sub(r'\n ', '\n', text)    # –ü—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫
        
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏ –Ω–µ—Ç –∞–±–∑–∞—Ü–µ–≤, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å
        if len(text) > 200 and '\n\n' not in text:
            # –ò—â–µ–º —Ç–æ—á–∫–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –∏–¥–µ—Ç –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
            sentences = re.split(r'\.\s+([–ê-–Ø–Å])', text)
            if len(sentences) > 2:
                # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤ –∞–±–∑–∞—Ü—ã
                result = sentences[0] + '.'
                for i in range(1, len(sentences), 2):
                    if i + 1 < len(sentences):
                        result += '\n\n' + sentences[i] + sentences[i + 1] + '.'
                text = result
        
        return text.strip()
    
    def is_enabled(self) -> bool:
        """Check if AI summarization is enabled and configured"""
        return self.enabled and self.client is not None


async def test_summarizer():
    """Test the AI summarizer"""
    # Load config from file
    import json
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            full_config = json.load(f)
        config = full_config.get("ai_summarization", {})
    except Exception:
        config = {
            "enabled": True,
            "provider": "groq",
            "model": "llama-3.1-8b-instant",
            "max_summary_length": 200,
            "api_key": os.getenv("GROQ_API_KEY")
        }
    
    summarizer = AISummarizer(config)
    
    if not summarizer.is_enabled():
        print("‚ùå AI summarizer is not enabled or configured")
        print("üí° Get free API key at: https://console.groq.com/")
        return
    
    # Test with sample news
    title = "Pro-Palestine protesters halt the Vuelta a Espa√±a final stage in Madrid"
    content = "Pro-Palestinian protesters disrupted the final stage of the Vuelta a Espa√±a on Sunday, forcing cyclists to stop with around 50 kilometres remaining on the Madrid course."
    link = "http://www.euronews.com/video/2025/09/15/pro-palestine-protesters-halt-the-vuelta-a-espana-final-stage-in-madrid"
    
    summary = await summarizer.summarize(title, content, link)
    
    if summary:
        print(f"‚úÖ AI Summary: {summary}")
    else:
        print("‚ùå Failed to create summary")


if __name__ == "__main__":
    # Test the summarizer
    asyncio.run(test_summarizer())